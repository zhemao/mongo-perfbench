#!/usr/bin/env python

# Copyright 2012 10gen, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generates graphs from the results of the benchmark by taking a json
# file, results.json, as an argument.
# Usage: benchplot.py [results.json]
# results.json can be generated by running mongoexport on the results database.
# If no argument is given, the json will be read from standard input.

import json
import matplotlib.pyplot as plt
import numpy as np
import sys
import pymongo
from optparse import OptionParser

def total_ops(trial):
    """Calculate the total number of operations performed in this trial"""
    return sum(trial[op] for op in ['query', 'insert', 'update', 'delete'])

def summarize_data(data):
    """Calculate and return the number of threads, the average number of
    operations performed, and the average latency."""
    name = data['name']
    if name == 'inplaceUpdate':
        name = 'update'
    numThreads = data['numThreads']
    numTrials = data['numTrials']
    avgops = sum([total_ops(trial) for trial in data['trials']]) / numTrials
    avglat = sum([trial[name + 'LatencyAverageMs'] 
                    for trial in data['trials']]) / numTrials
                    
    return numThreads, avgops, avglat

def plot_results(name, title, suite, host='127.0.0.1', 
                 database='experiment', output=None):

    db = pymongo.Connection(host)[database]

    query = db.configs.find_one({'suiteName': suite})
    
    del query['_id']
    del query['suiteName']

    query['name'] = name

    results = db.results.find(query, sort=[('numThreads', 1)])

    allThreads = []
    allOps = []
    allLatency = []

    # go through and append the thread #, ops, and latency 
    # to the proper lists
    for data in results:
        threads, ops, lat = summarize_data(data)
        allThreads.append(threads)
        allOps.append(ops)
        allLatency.append(lat)

    coefficients = np.polyfit(allOps, allLatency, 1)
    equation = np.poly1d(coefficients)
    bestfit = equation(allOps)
    
    # Begin plotting code
    fig = plt.figure(1)
    fig.subplots_adjust(hspace=0.5)

    # plot threads vs operations
    ax = fig.add_subplot(311)
    ax.set_title(title, size='x-large')
    ax.set_xlabel('Threads')
    ax.set_ylabel('Number of Ops/sec')
    ax.plot(allThreads, allOps)
    ax.autoscale_view()
    
    # plot threads vs latency
    ax = fig.add_subplot(312)
    ax.set_xlabel('Threads')
    ax.set_ylabel('Latency (microseconds)')
    ax.plot(allThreads, allLatency)
    ax.autoscale_view()

    # plot operations vs latency
    ax = fig.add_subplot(313)
    ax.set_ylabel('Latency(micros)')
    ax.set_xlabel('Ops/sec')
    ax.scatter(allOps, allLatency)
    ax.plot(allOps, bestfit)
    ax.autoscale_view()
    
    if output is None:
        plt.show()
    else:
        fig.savefig(output)

def main():
    parser = OptionParser(usage="%prog [options] [results-file.json]")
    parser.add_option('-t', '--title', dest='title', default="Results",
                      help="The title to use when labeling the graph.")
    parser.add_option('-H', '--host', dest='host', default='127.0.0.1',
                      help="The mongodb host to connect to")
    parser.add_option('-n', '--name', dest='name', default='findOne',
                      help="The name of the test")
    parser.add_option('-s', '--suite', dest='suite', 
                      default='ec2-ebs-inRAM-single',
                      help='The name of the test suite')
    parser.add_option('-d', '--database', dest='database',
                      default='experiment',
                      help='The name of the results database')
    parser.add_option('-o', '--output', dest='output',
                      default=None, 
                      help = ('The file to save the image to.'
                              'Omitting this argument causes the script'
                              'to plot to the screen.'))
    options, args = parser.parse_args()

    plot_results(options.name, options.title, options.suite,
                 options.host, options.database, options.output)

if __name__ == '__main__':
    main()
