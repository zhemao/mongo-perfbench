#!/usr/bin/env python

# Copyright 2012 10gen, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generates graphs from the results of the benchmark by taking a json
# file, results.json, as an argument.
# Usage: benchplot.py [results.json]
# results.json can be generated by running mongoexport on the results database.
# If no argument is given, the json will be read from standard input.

import json
import matplotlib.pyplot as plt
import numpy as np
import sys
from optparse import OptionParser

def total_ops(trial):
    """Calculate the total number of operations performed in this trial"""
    return sum(trial[op] for op in ['query', 'insert', 'update', 'delete'])

def summarize_data(data):
    """Calculate and return the number of threads, the average number of
    operations performed, and the average latency."""
    name = data['name']
    if name == 'inplaceUpdate':
        name = 'update'
    numThreads = data['numThreads']
    numTrials = data['numTrials']
    avgops = sum([total_ops(trial) for trial in data['trials']]) / numTrials
    avglat = sum([trial[name + 'LatencyAverageMs'] 
                    for trial in data['trials']]) / numTrials
                    
    return numThreads, avgops, avglat

def main():
    parser = OptionParser(usage="%prog [options] [results-file.json]")
    parser.add_option('-t', '--title', dest='title', default="Results",
                      help="The title to use when labeling the graph.")
    
    options, args = parser.parse_args()

    if len(args) > 0:
        f = open(args[0])
    else:
        f = sys.stdin

    results = [json.loads(line.strip()) for line in f]
    results.sort(key=lambda obj: obj['numThreads'])

    allThreads = []
    allOps = []
    allLatency = []

    # go through and append the thread #, ops, and latency 
    # to the proper lists
    for data in results:
        threads, ops, lat = summarize_data(data)
        allThreads.append(threads)
        allOps.append(ops)
        allLatency.append(lat)

    coefficients = np.polyfit(allOps, allLatency, 1)
    equation = np.poly1d(coefficients)
    bestfit = equation(allOps)
    
    # Begin plotting code
    fig = plt.figure(1)
    fig.subplots_adjust(hspace=0.5)

    # plot threads vs operations
    ax = fig.add_subplot(311)
    ax.set_title(options.title, size='x-large')
    ax.set_xlabel('Threads')
    ax.set_ylabel('Number of Ops/sec')
    ax.plot(allThreads, allOps)
    ax.autoscale_view()
    
    # plot threads vs latency
    ax = fig.add_subplot(312)
    ax.set_xlabel('Threads')
    ax.set_ylabel('Latency (microseconds)')
    ax.plot(allThreads, allLatency)
    ax.autoscale_view()

    # plot operations vs latency
    ax = fig.add_subplot(313)
    ax.set_ylabel('Latency(micros)')
    ax.set_xlabel('Ops/sec')
    ax.scatter(allOps, allLatency)
    ax.plot(allOps, bestfit)
    ax.autoscale_view()
    
    plt.show()
    # End plotting code

if __name__ == '__main__':
    main()
