How to use performance benchmarking scripts

Step 1: Mongodb setup

Install all the mongodb executables on each of the servers you are using.
The executables should be on the user's path. You can also place them in
$HOME/bin. The scripts will add this directory to the path before running.

Create a mongodb configuration file in ~/.mongod.conf. 
See http://www.mongodb.org/display/DOCS/File+Based+Configuration for the syntax.

If you are running on ec2, I suggest that you use the nojournal option. 
Otherwise, mongod will spend a very long time preallocating journal files
on startup.

Step 2: Script installation

Clone the mongodb repo (with the perfbench changes) to ~/mongo on each of the
servers. The following command should do it.

    git clone https://github.com/zhemao/mongo.git -b perfbench2 ~/mongo

Step 3: Local configuration

Create a configuration file on your local computer (or whatever computer you
will start the benchmark from).

Here is an example with an explanation of each of the fields

    {
        "results-server": "results.example.com",
        "database-server": "database.example.com",
        "operation" : "findone",
        "suite" : "default",
        "maxthreads" : 8,
        "increment": 2,
        "seconds" : 10,
        "trials" : 5,
        "load-servers": [
            "load1.example.com",
            "load2.example.com",
            "load3.example.com",
            "load4.example.com"
        ]
    }

results-server 
    The hostname of the database on which the results of the benchmark
    will be stored.

database-server
    The hostname of the database that the program is to benchmark.

operation
    The operation that will be run in the benchmark. Valid operations are
    findone, insert, update, inplace_update.

suite
    The name of the current benchmark suite. This variable is used to obtain
    extra information from the database. It is not strictly necessary.

maxthreads
    The maximum number of threads to be used on each server.

increment
    The amount by which the number of threads will be incremented for each
    experiment.

seconds
    The amount of time each trial will be run for

trials
    The number of trials to be run in each experiment

load-servers
    A list of hostnames for the servers that will be producing the loads

Step 4: Launch!

Run the runbench.py script

    python runbench.py config.json


