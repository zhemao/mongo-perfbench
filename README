How to use performance benchmarking scripts

Step 1: Mongodb setup

Install all the mongodb executables on each of the servers you are using.
The executables should be on the user's path. You can also place them in
$HOME/bin. The scripts will add this directory to the path before running.

Create a mongodb configuration file in ~/.mongod.conf. 
See http://www.mongodb.org/display/DOCS/File+Based+Configuration for the syntax.

Step 2: Script installation

Clone the mongodb repo (with the perfbench changes) to ~/mongo on each of the
servers. The following command should do it.

    git clone https://github.com/zhemao/mongo.git -b perfbench2 ~/mongo

Step 3: SSH Setup

Go to the computer from which you will be launching the script (we will
henceforth refer to this machine as the controller). 

On the controller, generate a password-less ssh keypair. Add the public key
to the authorized_keys files of all the other servers.

SSH into each server once from the controller so that the signatures are added 
to the controller's known_hosts file. (This is necessary for the benchmarking 
scripts to work without any user input). 

Step 4: Configuration File

Create a json configuration file on the controller.

Here is an example with an explanation of each of the fields

    {
        "results-server": "results.example.com",
        "database-server": "database.example.com",
        "operation" : "findone",
        "suite" : "default",
        "maxthreads" : 8,
        "increment": 2,
        "seconds" : 10,
        "trials" : 5,
        "load-servers": [
            "load1.example.com",
            "load2.example.com",
            "load3.example.com",
            "load4.example.com"
        ]
    }

results-server 
    The hostname of the database on which the results of the benchmark
    will be stored.

database-server
    The hostname of the database that the program is to benchmark.

operation
    The operation that will be run in the benchmark. Valid operations are
    findone, insert, update, inplace_update.

suite
    The name of the current benchmark suite. This variable is used to obtain
    extra information from the database. It is not strictly necessary.

maxthreads
    The maximum number of threads to be used on each server.

increment
    The amount by which the number of threads will be incremented for each
    experiment.

seconds
    The amount of time each trial will be run for

trials
    The number of trials to be run in each experiment

load-servers
    A list of hostnames for the servers that will be producing the loads

Step 5: Launch!

Run the runbench.py script

    python runbench.py config.json

Where config.json is the json configuration file that you created in step 4.

Special Instructions for Windows Setup

The process of setting up the windows server as the database server is long
and tedious. I'm leaving some documentation here on how to get everything 
set up correctly. 

Setting up SSHD

The first thing you need to do is set up the SSH server. On Windows this is
rather non-trivial. First, log in to the windows machine as the user you will
eventually be running the benchmarks as through Remote Desktop. Install 
freeSSHD from http://www.freesshd.com/. Start up freeSSHD from the start menu 
and open the configuration menu from the system tray icon (in the bottom right).Go to the Authentication tab and make sure public key authentication is enabled.
Then go to the Users tab, click the user you will be log in as, ensure that 
Shell access is enabled, and then click the "Change" button. In the Change 
dialog, make sure that the Authorization field is set to Public Key. 
Copy the public key you are using to log in from the command server and place 
it under "C:\Program Files\freeSSHd\username", where username is replaced with 
the username of the user you are logging in as. On 64-bit Windows installed, 
the folder will probably be in "Program Files (x86)" instead of "Program Files".
Try logging in through SSH from the command server. If it still asks for a 
password, try restarting freeSSHd. By this, I don't mean just stopping the SSH
server from the server status, I mean actually stopping the freeSSHd 
application by right clicking on its sytem tray icon and pressing unload. 
You can then restart it from the start menu. After finishing all this, close
the RDP application, but do not log out. If you log out, freeSSHd will be
closed.

Setting up Python and MongoDB

You can download the windows binaries from http://www.mongodb.org/downloads.
Install them in the bin directory of your home folder.
Download and install python 2.7 from python.org. You then need to add these
programs to your system path. Open up "My Computer" (or just "Computer") from
the start menu and click on the "System Properties" button in the top bar.
Then click on "Advanced System Settings" and "Environmental Variables".
Go down to the Path variable and add C:\Users\YourUsername, C:\Python27, and
C:\Python27\Scripts to the path (note that paths are separated by semicolons).

The next step is to install the necessary python libraries. Install distribute
by downloading and running the distribute_setup.py script from 
http://pypi.python.org/pypi/distribute/. Then install pip from 
http://pypi.python.org/pypi/pip/. Finally, use pip to install pymongo by
running "pip install pymongo". 

Extra Configuration on Command Server

To make everything work on Windows, you'll need to add an extra configuration
variable to the config.json file. Add a variable called "database-system" to
the configuration file and set it to "Windows". This way, the runbench.py
script will be able to determine the correct path to the cleanandrestart.py
and getserverinfo.py scripts.
