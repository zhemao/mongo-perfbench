How to use performance benchmarking scripts

Step 1: Mongodb setup

Install all the mongodb executables on each of the servers you are using.
The executables should be on the user's path. You can also place them in
$HOME/bin. The scripts will add this directory to the path before running.

Create a mongodb configuration file in ~/.mongod.conf. 
See http://www.mongodb.org/display/DOCS/File+Based+Configuration for the syntax.

If you are running on ec2, I suggest that you use the nojournal option. 
Otherwise, mongod will spend a very long time preallocating journal files
on startup.

Step 2: Script installation

Clone the mongodb repo (with the perfbench changes) to ~/mongo on each of the
servers. The following command should do it.

    git clone https://github.com/zhemao/mongo.git -b perfbench2 ~/mongo

Step 3: Local configuration

Create a configuration file on your local computer, see example.json in this 
directory to see what format the configuration file should follow.

Step 4: Launch!

Run the runbench.py script

    python runbench.py config.json

Detailed info

The workhorses of the performance benchmarking are the rampup.sh and holdit.sh
scripts.

rampup.py runs the benchmarking scripts against the server repeatedly with the 
number of threads increasing each time.

holdit.py runs the findone.js benchmark in an infinite while loop with
the maximum numbers of threads

There are also a few helper scripts

cleanandrestart.py stops mongod, resets the data files to the original state, and then restarts
